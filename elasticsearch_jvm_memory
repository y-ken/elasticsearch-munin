#!/usr/bin/env perl

# Parameters supported:       
#                             
# config                      
# autoconf                    
#                             
# Magic markers:              
#%# family=auto               
#%# capabilities=autoconf     
                              
use strict;                   
use warnings;                 
use LWP;                      
use JSON qw/decode_json/;     
                              
=head1 NAME                   
                              
elasticsearch_jvm_memory - A munin plugin that collects JVM memory stats from the JVM of your elasticsearch instances
                              
=head1 APPLICABLE SYSTEMS     
                              
elasticsearch                 
                              
=head1 CONFIGURATION

None

=head1 BUGS

None known so far. If you find any, let me know.

=head1 AUTHOR

Tomas Doran (t0m) - c<< <bobtfish@bobtfish.net> >>
Kentaro Yoshida - https://github.com/y-ken

=cut

my %out = (heap_max => 0, heap_committed => 0, heap_used => 0, non_heap_committed => 0, non_heap_used => 0);
if ($ARGV[0] and $ARGV[0] eq 'config') {
    print "graph_args --base 1024\n";
    print "graph_title elasticsearch JVM memory usage\n";
    print "graph_category elasticsearch\n";
    print "graph_vlabel Bytes\n";

    foreach my $name (keys %out) {
        print "$name.label $name\n"."$name.type GAUGE\n";
    }
    exit(0);
}

my $host = exists $ENV{'host'} ? $ENV{'host'} : 'localhost';
my $port = exists $ENV{'port'} ? $ENV{'port'} : 9200;

my $ua = LWP::UserAgent->new;
$ua->timeout(10);

sub get_json_from_url {
    my $uri = shift;
    my $res = $ua->get($uri, 'Content-Type' => 'application/json' );
    my $data = {};
    if ($res->is_success) {
        $data = do { local $@; eval { decode_json($res->content) } };
    } elsif ($ENV{'MUNIN_DEBUG'}) {
        print STDERR "Error: ".$res->code." for $uri\n";
    }
    return $data;
}

my $data = get_json_from_url("http://$host:$port/_nodes/_local/stats/jvm");
if ( ! $data->{nodes}) {
    foreach my $name (keys %out) {
        print "$name.value U\n";
    }
    exit(0);
}

foreach my $full_node_name (keys %{$data->{nodes}}) {
    next unless $data->{nodes}{$full_node_name};
    foreach my $name (grep { /_in_bytes$/ } keys %{ $data->{nodes}{$full_node_name}{jvm}{mem} }) {
        my ($dname) = $name =~ m/(.+)_in_bytes$/;
        $out{$dname} += $data->{nodes}{$full_node_name}{jvm}{mem}{$name};
    }
}
foreach my $name (keys %out) {
    print "$name.value " . $out{$name} . "\n";
}

